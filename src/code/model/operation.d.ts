import * as L from "leaflet";
import WasabeeLink from "./link";
import WasabeePortal from "./portal";
import WasabeeMarker from "./marker";
import WasabeeZone from "./zone";
import Evented from "./evented";
export declare type KeyOnHand = {
    portalId: PortalID;
    gid: GoogleID;
    capsule: string;
    onhand: number;
};
export declare type OpPermItem = {
    role: "read" | "write" | "assignonly";
    teamid: string;
    zone: number;
};
interface IOperation {
    ID: OpID;
    name: string;
    creator: string | GoogleID;
    opportals: WasabeePortal[];
    anchors: string[];
    links: WasabeeLink[];
    markers: WasabeeMarker[];
    color: string;
    comment: string;
    zones: WasabeeZone[];
    referencetime: string;
}
export interface IServerOp extends IOperation {
    creator: GoogleID;
    teamlist: OpPermItem[];
    keysonhand: KeyOnHand[];
    lasteditid: string;
    fetched: string;
    modified: string;
}
export interface ILocalOp extends IOperation {
    teamlist: OpPermItem[];
    keysonhand: KeyOnHand[];
    lasteditid: string;
    fetched: string;
    fetchedOp: string;
    server: string;
    localchanged: boolean;
    remoteChanged: boolean;
    background: boolean;
    stored: number;
}
export default class WasabeeOp extends Evented implements IOperation {
    ID: string;
    name: string;
    creator: string;
    anchors: string[];
    links: WasabeeLink[];
    markers: WasabeeMarker[];
    color: string;
    comment: string;
    zones: WasabeeZone[];
    referencetime: string;
    teamlist: OpPermItem[];
    keysonhand: KeyOnHand[];
    lasteditid: string;
    fetched: string;
    fetchedOp: string;
    localchanged: boolean;
    remoteChanged: boolean;
    server: string;
    blockers: WasabeeLink[];
    background: boolean;
    stored: number;
    _idToOpportals: Map<string, WasabeePortal>;
    _coordsToOpportals: Map<string, WasabeePortal>;
    _dirtyCoordsTable: boolean;
    _batchmode: boolean;
    constructor(obj: any);
    static load(opID: any): Promise<WasabeeOp>;
    static delete(opID: any): Promise<void>;
    static migrate(opID: any): Promise<void>;
    store(): Promise<void>;
    toJSON(): IOperation;
    toExport(): string;
    get opportals(): WasabeePortal[];
    buildCoordsLookupTable(): void;
    getColor(): string;
    containsPortal(portal: any): boolean;
    getPortalByLatLng(lat: any, lng: any): WasabeePortal;
    containsLinkFromTo(fromPortalId: any, toPortalId: any): boolean;
    containsLink(link: any): boolean;
    containsMarker(portal: any, markerType: any): boolean;
    containsMarkerByID(portalID: any, markerType: any): boolean;
    getPortalMarkers(portal: any): Map<any, any>;
    getLinkByPortalIDs(portalId1: any, portalId2: any): WasabeeLink;
    getLink(portal1: any, portal2: any): WasabeeLink;
    getLinkListFromPortal(portal: any): WasabeeLink[];
    getPortal(portalID: any): WasabeePortal;
    getMarker(markerID: any): WasabeeMarker;
    removeAnchor(portalId: any): void;
    removeMarker(marker: any): void;
    setMarkerComment(marker: any, comment: any): void;
    setMarkerState(markerID: any, state: any): void;
    setLinkComment(link: any, comment: any): void;
    setLinkState(linkID: any, state: any): void;
    setLinkColor(linkID: any, color: any): void;
    setLinkOrder(linkID: any, order: any): void;
    setMarkerOrder(markerID: any, order: any): void;
    setPortalComment(portal: any, comment: any): void;
    setPortalHardness(portal: any, hardness: any): void;
    removeLink(startPortal: any, endPortal: any): void;
    reverseLink(startPortalID: any, endPortalID: any): void;
    cleanAll(): void;
    cleanAnchorList(): void;
    cleanPortalList(): void;
    addPortal(portal: any): void;
    _addPortal(portal: any): boolean;
    updatePortal(portal: any): boolean;
    _updatePortal(portal: any): boolean;
    addLink(fromPortal: WasabeePortal, toPortal: WasabeePortal, options?: {
        description?: string;
        order?: number;
        color?: string;
        replace?: boolean;
    }): WasabeeLink;
    containsAnchor(portalId: string): boolean;
    addAnchor(portal: WasabeePortal): void;
    get fakedPortals(): WasabeePortal[];
    _swapPortal(originalPortal: WasabeePortal, newPortal: WasabeePortal): void;
    swapPortal(originalPortal: WasabeePortal, newPortal: WasabeePortal): void;
    addMarker(markerType: string, portal: WasabeePortal, options: any): boolean;
    assignMarker(id: any, gid: any): void;
    assignLink(id: any, gid: any): void;
    clearAllItems(): void;
    clearAllLinks(): void;
    clearAllMarkers(): void;
    update(updateLocalchanged?: boolean): void;
    updateBlockers(): void;
    startBatchMode(): void;
    endBatchMode(): void;
    convertLinksToObjs(links: any): any[];
    convertMarkersToObjs(markers: any): any[];
    convertPortalsToObjs(portals: any): any[];
    convertZonesToObjs(zones: any): any[];
    get mbr(): L.LatLngBounds;
    canWriteServer(): boolean;
    canWrite(): boolean;
    getPermission(): "write" | "read" | "assignonly";
    isOnCurrentServer(): boolean;
    isServerOp(): boolean;
    isOwnedOp(): boolean;
    get nextOrder(): number;
    keyOnHand(portalId: any, gid: any, onhand: any, capsule: any): void;
    KeysOnHandForPortal(portalId: any): number;
    KeysRequiredForPortal(portalId: any): number;
    zoneName(zoneID: any): any;
    setZone(thing: any, zoneID: any): void;
    removeZone(zoneID: any): void;
    removeZonePoints(zoneID: any): void;
    renameZone(zoneID: any, name: any): void;
    addZone(): number;
    addZonePoint(zoneID: number, latlng: L.LatLng): void;
    changes(origin?: WasabeeOp): {
        addition: any[];
        edition: any[];
        deletion: any[];
        name: any;
        color: any;
        comment: any;
    };
    checkChanges(): boolean;
    mergeZones(op: any): number;
    applyChanges(changes: any, op: any): {
        compatibility: {
            ok: boolean;
            rewrite: {
                link: number;
                marker: number;
            };
        };
        addition: {
            link: number;
            marker: number;
            zone: number;
            ignored: number;
        };
        deletion: {
            link: number;
            marker: number;
        };
        edition: {
            portal: number;
            link: number;
            marker: number;
            assignment: number;
            duplicate: number;
            singlePortalLink: number;
            removed: number;
        };
    };
    determineZone(latlng: any): number;
}
export { };
